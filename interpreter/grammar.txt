program        --> declaration* EOF
declaration    --> funDecl
                   | varDecl
                   | statement
funDecl        --> "fun" function ;
function       --> IDENTIFIER "(" parameters? ")" block ;
parameters     --> IDENTIFIER ( "," IDENTIFIER )* ;
varDecl        --> "var" IDENTIFIER ( "=" expression )? ";" ;
statement      --> exprStmt
                   | forStmt
                   | ifStmt
                   | printStmt
                   | returnStmt
                   | whileStmt
                   | block ;
returnStmt     --> "return" expression? ";" ;
forStmt        --> "for" "(" ( varDecl | exprStmt | ";" )
                   expression? ";"
                   expression? ")" statement ;
whileStmt      --> "while" "(" expression ")" statement ;
block          --> "{" declaration* "}" ;
exprStmt       --> expression ";" ;
printStmt      --> "print" expression ";" ;
ifStmt         --> "if" "(" expression ")" statement
                   ( "else" statement )? ;
# expression     --> equality ;
# expression     --> equality ( "," equality )* ; # 6. Challenge 1.
# expression     --> ternary ( "," ternary )* ; # 6. Challenge 1.
# expression     --> assignment ( "," assignment )* ; # 6. Challenge 1, modified for assignment.
expression     --> assignment # 10. Functions.
assignment     --> IDENTIFIER "=" assignment
                   | logic_or

logic_or       --> logic_and ( "or" logic_and )* ;
logic_and      --> ternary ( "and" ternary )* ; # Book has equality instead of ternary.

ternary        --> equality ( "?" ternary ":" ternary ) # 6. Challenge 2.
equality       --> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     --> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           --> factor ( ( "-" | "+" ) factor )* ;
factor         --> unary ( ( "/" | "*" ) unary )* ;
unary          --> ( "!" | "-" ) unary | call ;
call           --> primary ( "(" arguments? ")"* ;
arguments      --> expression ( "," expression )* ;
primary        --> NUMBER | STRING | "true" | "false" | "nil"
                   | "(" expression ")"
                   | IDENTIFIER ;

# Cannot have
#   a ? b ? : c : d
#
# Also
#   a ? b : c ? d : e
# can be parsed as
#  (a ? b : c) ? d : e
# or
#   a ? b : (c ? d : e)
